include:
  - docassemble.scasp:DAScasp.yml
---
modules:
  - docassemble.datatypes.DADataType
---
generic object: DADTBoolean
question: |
  % if x.ask != "":
  ${ x.ask }
  % else:
  Is ${ x.self_value } true${ (" for " + x.parent_value) if x.parent_value else "" }?
  % endif
yesno: x.value
---
generic object: DADTContinue
question: |
  % if x.ask != "":
  ${ x.ask }
  % else:
  ${ x.self_value }${ (" for " + x.parent_value) if x.parent_value else "" }?
  % endif
field: x.value
---
generic object: DADTNumber
question: |
  % if x.ask != "":
  ${ x.ask }
  % else:
  What is ${ x.self_value }${ (" for " + x.parent_value) if x.parent_value else "" }?
  % endif
fields:
  - ${ x.self_value }: x.value
    datatype: number
---
generic object: DADTEmail
question: |
  % if x.ask != "":
  ${ x.ask }
  % else:
  What is ${ x.self_value } (an email address)${ " for " + x.parent_value if x.parent_value else "" }?
  % endif
fields:
  - ${ x.self_value }: x.value
    datatype: email
---
generic object: DADTString
question: |
  % if x.ask != "":
  ${ x.ask }
  % else:
  What is ${ x.self_value }${ " for " + x.parent_value if x.parent_value else "" }?
  % endif
fields:
  - ${ x.self_value }: x.value
    datatype: text
---
generic object: DADTDate
question: |
  % if x.ask != "":
  ${ x.ask }
  % else:
  What is ${ x.self_value }${ " for " + x.parent_value if x.parent_value else "" }?
  % endif
fields:
  - ${ x.self_value }: x.value
    datatype: date
---
generic object: DADTTime
question: |
  % if x.ask != "":
  ${ x.ask }
  % else:
  What is ${ x.self_value }${ " for " + x.parent_value if x.parent_value else "" }?
  % endif
fields:
  - ${ x.self_value }: x.value
    datatype: time
---
generic object: DADTDateTime
question: |
  % if x.ask != "":
  ${ x.ask }
  % else:
  What is ${ x.self_value }${ " for " + x.parent_value if x.parent_value else "" }?
  % endif
fields:
  - ${ x.self_value }: x.value
    datatype: datetime
---
generic object: DADTYesNoMaybe
question: |
  % if x.ask != "":
  ${ x.ask }
  % else:
  Is ${ x.self_value } true${ " for " + x.parent_value if x.parent_value else "" }?
  % endif
yesnomaybe: x.value
---
generic object: DADTFile
question: |
  % if x.ask != "":
  ${ x.ask }
  % else:
  Upload a file ${ x.self_value }${ " for " + x.parent_value if x.parent_value else "" }
  % endif
fields:
  - ${ x.self_value }: x.value
    datatype: file
---
generic object: DAList
question: |
  % if x.any != "":
  ${ x.any }
  % else:
  Is there a ${ x.self_value }${ " for " + x.parent_value if x.parent_value else "" }?
  % endif
yesno: x.there_are_any 
---
generic object: DAList
question: |
  % if x.another != "":
  ${ x.another }
  % else:
  Is there another ${ x.self_value }${ " for " + x.parent_value if x.parent_value else "" }?
  % endif
yesno: x.there_is_another
---
generic object: DADTEnum
question: |
  % if x.ask != "":
  ${ x.ask }
  % else:
  Select ${ x.self_value }${ " for " + x.parent_value if x.parent_value else "" }
  % endif
fields:
  - ${ x.self_value }: x.value
    datatype: radio
    code: |
      x.options
---
generic object: DADTObjectRef
question: |
  % if x.ask != "":
  ${ x.ask }
  % else:
  Select ${ x.self_value }${ " for " + x.parent_value if x.parent_value else "" }?
  % endif
fields:
  - ${ x.self_value }: x.value
    datatype: object
    choices: x.source
---
mandatory: True
code: |
  def isList(agenda_item):
    substr = "[ijklmn]*[0-9]*"
    agenda_without_indices = re.sub("\[" + substr + "\]",'',agenda_item)
    for i, item in enumerate(agenda_without_indices):
        for var in data_structure:
            if item == var['name']:
                if i + 1 == len(agenda_without_indices):
                    if "exactly" in var and var["exactly"] > 1:
                        return True
                    if "minimum" in var:
                      if "maximum" not in var:
                        return True
                      if var["minimum"] > 1:
                        return True
                      if var["minimum"] == 0 and "maximum" in var and var["maximum"] == 1:
                        return True
                    if "maximum" in var:
                      if var["maximum"] > 1:
                        return True
                    return False
                elif "attributes" in var:
                    data_structure = var["attributes"]
                pass